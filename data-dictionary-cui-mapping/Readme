Readme
The set of scripts developed by Kevin A  is designed to map CDE attributes to UMLS concepts by using API to MetaMap.
The main repository for development of these scripts is supported by Kevin A. (from BRICS team (https://brics.cit.nih.gov/))
The link to Kevin A. GitHub repository is  https://github.com/kevon217/data-dictionary-cui-mapping
Please refer to Kevin A  GitHub for the latest and greatest versions of these wonderfull scripts
_________________________________________________________

The scripts can be run either as Jupiter notebook files or as Python scripts (.py) - 
the .py files are uploaded to this repository
The Jupiter notebook files are under development and available from Kevin A  GitHub repository (https://github.com/kevon217/data-dictionary-cui-mapping)
___________________________________________________

Requirements
To use the MetaMap python API requires to build it on your local the Python-based API 
created for the Indexing Initiative Scheduler facility (NLM) used to provide users with the ability to programmatically submit jobs to 
the Scheduler Batch and Interactive facilities. Available at https://github.com/lhncbc/skr_web_python_api

_____________________
Installation
(refer to the main Kevin A. GitHub repository (https://github.com/kevon217/data-dictionary-cui-mapping) for the latetst installation instructions)

Use the package manager pip to install data-dictionary-cui-mapping or pip install from the GitHub repo.
pip install data-dictionary-cui-mapping
#pip install git+https://github.com/kevon217/data-dictionary-cui-mapping.git
__________________
Usage
(refer to the main Kevin A. GitHub repository (https://github.com/kevon217/data-dictionary-cui-mapping) for the latetst usage instructions)

# import batch_query_pipeline modules from metamap OR umls package
from data_dictionary_cui_mapping.metamap import batch_query_pipeline as mm_bqp
from data_dictionary_cui_mapping.umls import batch_query_pipeline as umls_bqp

# import helper functions for loading, viewing, composing configurations for pipeline run
from data_dictionary_cui_mapping.utils import helper
from omegaconf import OmegaConf

# import modules to create data dictionary with curated CUIs and check the file for missing mappings
from data_dictionary_cui_mapping.curation import create_dictionary_import_file
from data_dictionary_cui_mapping.curation import check_cuis

# LOAD/EDIT CONFIGURATION FILES
cfg = helper.compose_config.fn(overrides=["custom=de", "apis=config_metamap_api"]) # custom config for MetaMap on data element 'title' column
# cfg = helper.compose_config.fn(overrides=["custom=de", "apis=config_umls_api"]) # custom config for UMLS API on data element 'title' column
# cfg = helper.compose_config.fn(overrides=["custom=pvd", "apis=config_metamap_api"]) # custom config for MetaMap on 'permissible value descriptions' column
# cfg = helper.compose_config.fn(overrides=["custom=pvd", "apis=config_umls_api"]) # custom config for UMLS API on 'permissible value descriptions' column
cfg.apis.user_info.email = '' # enter your email
cfg.apis.user_info.apiKey = '' # enter your api key
print(OmegaConf.to_yaml(cfg))

# STEP-1: RUN BATCH QUERY PIPELINE
df_final_mm = mm_bqp.main(cfg) # run MetaMap batch query pipeline
# df_final_umls = umls_bqp.main(cfg) # run UMLS API batch query pipeline

# MANUAL CURATION STEP IN EXCEL FILE (see curation example in https://github.com/kevon217/data-dictionary-cui-mapping/notebooks/examples_files/DE_Step-1_curation_keepCol.xlsx)

# STEP-2: CREATE DATA DICTIONARY IMPORT FILE
cfg = helper.load_config.fn(helper.choose_input_file.fn("Load config file from Step 1"))
create_dictionary_import_file.main(cfg)

# CHECK CURATED CUI MAPPINGS
cfg = helper.load_config.fn(helper.choose_input_file.fn("Load config file from Step 2"))
check_cuis.main(cfg)
